import { useEffect, useState } from 'react';
import Textarea from '@mui/joy/Textarea';
import {
  setLocalStorage,
  getLocalStorage,
  createSummarizerSession,
  createPromptSession,
  sendContentMessage,
} from '../utils/utils.js';

const SingleNote = ({ questionName, setNotes, setShowNote }) => {
  const [isLoading, setIsLoading] = useState(true);
  // Summarized value of the question description
  const [questionSummary, setQuestionSummary] = useState('');
  // Question notes by the user
  const [questionNotes, setQuestionNotes] = useState('');
  // Tags generated by ai for the current question
  const [questionTags, setQuestionTags] = useState('');

  const generateQuestionDescription = async () => {
    try {
      const { questionDescription } = await sendContentMessage({
        type: 'getQuestionDescription',
      });

      const summarizeAI = await createSummarizerSession({
        sharedContext:
          'summarize the provided text in just one sentence, keep it short, easy to read and also gives the user a glimpse what the question is about.',
        type: 'tl;dr',
        format: 'plain-text',
        length: 'short',
      });

      const promptAI = await createPromptSession({
        systemPrompt: `Based on the provided LeetCode question, generate the tags in the a single string format like this: "tag1, tag2,.."
          •	The tags should be directly relevant to the question and reflect the core data structure and algorithm topics it involves.
          •	Assign a maximum of 2 tags to each question, ensuring they are highly specific to the question's requirements.
          •	Avoid generalized or non-DSA-specific tags like 'mathematics' or 'general problem-solving'.
          •	Focus on tags which correspond to well-known DSA concepts.
  
        Ensure the tags represent the primary techniques or concepts required to solve the question effectively`,
      });

      const tagsResp = await promptAI.prompt(
        `Question name is : ${questionName} and the question description is ${questionDescription}. Based on the information generate the maximum of 3 tags. If you can find the lesser most relevant tags that would be fine too.`
      );

      console.log(tagsResp); // TODO: for debugging

      const summary = await summarizeAI.summarize(questionDescription);

      setQuestionSummary(summary);

      setQuestionTags(tagsResp);

      setIsLoading(false);
    } catch (error) {
      console.log(
        'Error in SingleNote.jsx - generateQuestionDescription is:',
        error
      );
      setIsLoading(false);
    }
  };

  // Saves note in the local storage
  const saveNote = async () => {
    try {
      const newNote = {
        questionName: questionName,
        descripton: questionSummary,
        userNote: questionNotes,
        tags: questionTags?.split(','),
      };

      const storedNotes = await getLocalStorage({ param: 'notes' });

      // Check if `storedNotes` exists and has a `notes` array
      const existingNotes = storedNotes?.notes || [];

      // Update the existing note or add a new one
      const updatedNotes = existingNotes.some(
        (note) => note.questionName === questionName
      )
        ? existingNotes.map((note) =>
            note.questionName === questionName ? { ...note, ...newNote } : note
          )
        : [newNote, ...existingNotes];

      // Save the updated notes back to local storage
      setLocalStorage({ notes: updatedNotes });
      setNotes(updatedNotes);
      setShowNote(false);
    } catch (error) {
      console.log('Failed to store the note in the local storage: ', error);
      setShowNote(false);
    }
  };

  useEffect(() => {
    generateQuestionDescription();
  }, []);

  return (
    <>
      <Textarea defaultValue={questionName} placeholder={'Question name'} />
      {/* Will be completed by ai */}
      <Textarea
        placeholder={'Question summary'}
        value={isLoading ? 'Loading....' : questionSummary}
        disabled={isLoading}
        onChange={(e) => {
          setQuestionSummary(e.target?.value);
        }}
      />
      <Textarea
        placeholder={'Question notes'}
        maxRows={9}
        value={questionNotes}
        onChange={(e) => setQuestionNotes(e.target?.value)}
      />
      <Textarea
        placeholder={'Question tags'}
        minRows={0}
        maxRows={4}
        value={isLoading ? 'Loading...' : questionTags}
        onChange={(e) => {
          setQuestionTags(e.target?.value);
        }}
        disabled={isLoading}
      />
      <button
        disabled={isLoading}
        className="text-white bg-blue-300 disabled:bg-gray-400 disabled:cursor-not-allowed cursor-pointer p-2 font-semibold"
        onClick={saveNote}
      >
        Submit
      </button>
    </>
  );
};

export default SingleNote;
