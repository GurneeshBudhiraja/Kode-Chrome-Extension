import { useEffect, useState } from 'react';
import Textarea from '@mui/joy/Textarea';
import {
  createSummarizerSession,
  createPromptSession,
} from './componentUtils/componentUtils.js';
import {
  setLocalStorage,
  getLocalStorage,
  getCurrentTab,
} from '../utils/utils.js';

const SingleNote = ({ questionName, setNotes, setShowNote }) => {
  const [isLoading, setIsLoading] = useState(true);
  // summarized value for the question description
  const [summary, setSummary] = useState('');
  const [questionNotes, setQuestionNotes] = useState('');
  // tags generated by ai by looking at the problem
  const [aiTags, setAiTags] = useState('');
  // ai sessions
  const [summarizerSession, setSummarizerSession] = useState(null);
  const [promptSession, setPromptSession] = useState(null);

  // Gets the question description
  const getQuestionDescription = () => {
    return new Promise((resolve, reject) => {
      chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
        const activeTab = tabs[0]; // Get the active tab
        if (activeTab && activeTab.id) {
          // Send a message to the content script
          chrome.tabs.sendMessage(
            activeTab.id,
            { type: 'getQuestionDescription' },
            function (response) {
              if (chrome.runtime.lastError) {
                // Handle errors, if any
                console.error('Error:', chrome.runtime.lastError.message);
                reject(chrome.runtime.lastError.message);
              } else if (response && response.response) {
                resolve(response.response); // Return the response
              } else {
                reject('No response received from content script.');
              }
            }
          );
        } else {
          reject('No active tab found.');
        }
      });
    });
  };

  const generateAIResponse = async () => {
    const questionDescritpion = await getQuestionDescription();

    const summarizer = await createSummarizerSession({
      type: 'headline',
      format: 'plain-text',
      length: 'short',
    });
    setSummarizerSession(summarizer);
    console.log('summarizer state updated'); // TODO: remove in production

    const prompter = await createPromptSession({
      systemPrompt:
        'Based on the leetcode question provided generate the tags in the form of JSON format like this: {"tags":"[tag1, tag2]"}. The tags should be relevant to the question and only those tags should be given to the question that are most relevant to the question.',
    });
    setPromptSession(prompter);
    console.log('prompt session updated'); // TODO: remove in production

    const tagsRespJSON = await prompter.prompt(
      `Question name is : ${questionName} and whole question on leetcode is ${questionDescritpion}`
    );

    const tagsResp = JSON.parse(`${tagsRespJSON}`);

    const summary = await summarizer.summarize(questionDescritpion);
    setSummary(summary);
    setAiTags(tagsResp['tags'].join());

    setIsLoading(false);
  };

  const saveNote = async () => {
    try {
      const newNote = {
        questionName: questionName,
        descripton: summary,
        userNote: questionNotes,
        tags: aiTags?.split(','),
      };
      console.log('Saving in local storage...');
      console.log(newNote);

      const storedNotes = await getLocalStorage({ param: 'notes' });

      // Check if `storedNotes` exists and has a `notes` array
      const existingNotes = storedNotes?.notes || [];

      // Update the existing note or add a new one
      const updatedNotes = existingNotes.some(
        (note) => note.questionName === questionName
      )
        ? existingNotes.map((note) =>
            note.questionName === questionName ? { ...note, ...newNote } : note
          )
        : [...existingNotes, newNote];

      // Save the updated notes back to local storage
      setLocalStorage({ notes: updatedNotes });
      setNotes(updatedNotes);
      setShowNote(false);
    } catch (err) {
      console.log('Failed to store the note in the local storage');
    }
  };

  useEffect(() => {
    generateAIResponse();

    return () => {
      // Delete the ai sessions here
    };
  }, []);

  return (
    <>
      <Textarea defaultValue={questionName} placeholder={'Question name'} />
      {/* Will be completed by ai */}
      <Textarea
        placeholder={'Question summary'}
        value={isLoading ? 'Loading....' : summary}
        disabled={isLoading}
      />
      <Textarea
        placeholder={'Question notes'}
        maxRows={9}
        value={questionNotes}
        onChange={(e) => setQuestionNotes(e.target?.value)}
      />
      {/* Tags will be generated by ai in the form of csv */}
      <Textarea
        placeholder={'Question tags'}
        minRows={0}
        maxRows={4}
        value={isLoading ? 'Loading...' : aiTags}
        onChange={(e) => {
          console.log(e);
        }}
        disabled={isLoading}
      />
      <button
        disabled={isLoading}
        className="text-white bg-blue-300 disabled:bg-gray-400 disabled:cursor-not-allowed cursor-pointer p-2 font-semibold"
        onClick={saveNote}
      >
        Submit
      </button>
    </>
  );
};

export default SingleNote;
